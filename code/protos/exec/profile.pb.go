// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: profile.proto

package exec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProfileRequest_Type int32

const (
	ProfileRequest_nnMeter     ProfileRequest_Type = 0
	ProfileRequest_paddlelite  ProfileRequest_Type = 1
	ProfileRequest_tflite      ProfileRequest_Type = 2
	ProfileRequest_onnxruntime ProfileRequest_Type = 3
	ProfileRequest_FAI         ProfileRequest_Type = 4
)

// Enum value maps for ProfileRequest_Type.
var (
	ProfileRequest_Type_name = map[int32]string{
		0: "nnMeter",
		1: "paddlelite",
		2: "tflite",
		3: "onnxruntime",
		4: "FAI",
	}
	ProfileRequest_Type_value = map[string]int32{
		"nnMeter":     0,
		"paddlelite":  1,
		"tflite":      2,
		"onnxruntime": 3,
		"FAI":         4,
	}
)

func (x ProfileRequest_Type) Enum() *ProfileRequest_Type {
	p := new(ProfileRequest_Type)
	*p = x
	return p
}

func (x ProfileRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_profile_proto_enumTypes[0].Descriptor()
}

func (ProfileRequest_Type) Type() protoreflect.EnumType {
	return &file_profile_proto_enumTypes[0]
}

func (x ProfileRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileRequest_Type.Descriptor instead.
func (ProfileRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{0, 0}
}

type TFLiteArgs_DeviceType int32

const (
	TFLiteArgs_cpu     TFLiteArgs_DeviceType = 0
	TFLiteArgs_gpu     TFLiteArgs_DeviceType = 1
	TFLiteArgs_nnapi   TFLiteArgs_DeviceType = 2
	TFLiteArgs_hexagon TFLiteArgs_DeviceType = 3
	TFLiteArgs_xnnpack TFLiteArgs_DeviceType = 4
	TFLiteArgs_coreml  TFLiteArgs_DeviceType = 5
)

// Enum value maps for TFLiteArgs_DeviceType.
var (
	TFLiteArgs_DeviceType_name = map[int32]string{
		0: "cpu",
		1: "gpu",
		2: "nnapi",
		3: "hexagon",
		4: "xnnpack",
		5: "coreml",
	}
	TFLiteArgs_DeviceType_value = map[string]int32{
		"cpu":     0,
		"gpu":     1,
		"nnapi":   2,
		"hexagon": 3,
		"xnnpack": 4,
		"coreml":  5,
	}
)

func (x TFLiteArgs_DeviceType) Enum() *TFLiteArgs_DeviceType {
	p := new(TFLiteArgs_DeviceType)
	*p = x
	return p
}

func (x TFLiteArgs_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFLiteArgs_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_profile_proto_enumTypes[1].Descriptor()
}

func (TFLiteArgs_DeviceType) Type() protoreflect.EnumType {
	return &file_profile_proto_enumTypes[1]
}

func (x TFLiteArgs_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TFLiteArgs_DeviceType.Descriptor instead.
func (TFLiteArgs_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{6, 0}
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelFile  *File  `protobuf:"bytes,1,opt,name=modelFile,proto3" json:"modelFile,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	// Types that are assignable to Args:
	//
	//	*ProfileRequest_NnmeterArgs
	//	*ProfileRequest_PaddleLiteArgs
	//	*ProfileRequest_FaiArgs
	//	*ProfileRequest_TfliteArgs
	Args isProfileRequest_Args `protobuf_oneof:"args"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileRequest) GetModelFile() *File {
	if x != nil {
		return x.ModelFile
	}
	return nil
}

func (x *ProfileRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (m *ProfileRequest) GetArgs() isProfileRequest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *ProfileRequest) GetNnmeterArgs() *NNMeterArgs {
	if x, ok := x.GetArgs().(*ProfileRequest_NnmeterArgs); ok {
		return x.NnmeterArgs
	}
	return nil
}

func (x *ProfileRequest) GetPaddleLiteArgs() *PaddleLiteArgs {
	if x, ok := x.GetArgs().(*ProfileRequest_PaddleLiteArgs); ok {
		return x.PaddleLiteArgs
	}
	return nil
}

func (x *ProfileRequest) GetFaiArgs() *FAIArgs {
	if x, ok := x.GetArgs().(*ProfileRequest_FaiArgs); ok {
		return x.FaiArgs
	}
	return nil
}

func (x *ProfileRequest) GetTfliteArgs() *TFLiteArgs {
	if x, ok := x.GetArgs().(*ProfileRequest_TfliteArgs); ok {
		return x.TfliteArgs
	}
	return nil
}

type isProfileRequest_Args interface {
	isProfileRequest_Args()
}

type ProfileRequest_NnmeterArgs struct {
	NnmeterArgs *NNMeterArgs `protobuf:"bytes,10,opt,name=nnmeterArgs,proto3,oneof"`
}

type ProfileRequest_PaddleLiteArgs struct {
	PaddleLiteArgs *PaddleLiteArgs `protobuf:"bytes,11,opt,name=paddleLiteArgs,proto3,oneof"`
}

type ProfileRequest_FaiArgs struct {
	FaiArgs *FAIArgs `protobuf:"bytes,12,opt,name=faiArgs,proto3,oneof"`
}

type ProfileRequest_TfliteArgs struct {
	TfliteArgs *TFLiteArgs `protobuf:"bytes,13,opt,name=tfliteArgs,proto3,oneof"`
}

func (*ProfileRequest_NnmeterArgs) isProfileRequest_Args() {}

func (*ProfileRequest_PaddleLiteArgs) isProfileRequest_Args() {}

func (*ProfileRequest_FaiArgs) isProfileRequest_Args() {}

func (*ProfileRequest_TfliteArgs) isProfileRequest_Args() {}

type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size     uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *File) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NNMeterArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predictor string `protobuf:"bytes,1,opt,name=predictor,proto3" json:"predictor,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Framework string `protobuf:"bytes,3,opt,name=framework,proto3" json:"framework,omitempty"`
}

func (x *NNMeterArgs) Reset() {
	*x = NNMeterArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NNMeterArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NNMeterArgs) ProtoMessage() {}

func (x *NNMeterArgs) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NNMeterArgs.ProtoReflect.Descriptor instead.
func (*NNMeterArgs) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{3}
}

func (x *NNMeterArgs) GetPredictor() string {
	if x != nil {
		return x.Predictor
	}
	return ""
}

func (x *NNMeterArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NNMeterArgs) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

type PaddleLiteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PaddleLiteArgs) Reset() {
	*x = PaddleLiteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddleLiteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddleLiteArgs) ProtoMessage() {}

func (x *PaddleLiteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddleLiteArgs.ProtoReflect.Descriptor instead.
func (*PaddleLiteArgs) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{4}
}

func (x *PaddleLiteArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type FAIArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FAIArgs) Reset() {
	*x = FAIArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAIArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAIArgs) ProtoMessage() {}

func (x *FAIArgs) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAIArgs.ProtoReflect.Descriptor instead.
func (*FAIArgs) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{5}
}

type TFLiteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType     TFLiteArgs_DeviceType     `protobuf:"varint,1,opt,name=deviceType,proto3,enum=protos.TFLiteArgs_DeviceType" json:"deviceType,omitempty"`
	Params         *TFLiteParameters         `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	DelegateParams *TFLiteDelegateParameters `protobuf:"bytes,3,opt,name=delegateParams,proto3" json:"delegateParams,omitempty"`
}

func (x *TFLiteArgs) Reset() {
	*x = TFLiteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFLiteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFLiteArgs) ProtoMessage() {}

func (x *TFLiteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFLiteArgs.ProtoReflect.Descriptor instead.
func (*TFLiteArgs) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{6}
}

func (x *TFLiteArgs) GetDeviceType() TFLiteArgs_DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return TFLiteArgs_cpu
}

func (x *TFLiteArgs) GetParams() *TFLiteParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TFLiteArgs) GetDelegateParams() *TFLiteDelegateParameters {
	if x != nil {
		return x.DelegateParams
	}
	return nil
}

type TFLiteParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph                               string  `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	NumThreads                          int32   `protobuf:"varint,2,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	WarmupRuns                          int32   `protobuf:"varint,3,opt,name=warmup_runs,json=warmupRuns,proto3" json:"warmup_runs,omitempty"`
	NumRuns                             int32   `protobuf:"varint,4,opt,name=num_runs,json=numRuns,proto3" json:"num_runs,omitempty"`
	MaxSecs                             float32 `protobuf:"fixed32,5,opt,name=max_secs,json=maxSecs,proto3" json:"max_secs,omitempty"`
	RunDelay                            float32 `protobuf:"fixed32,6,opt,name=run_delay,json=runDelay,proto3" json:"run_delay,omitempty"`
	RunFrequency                        float32 `protobuf:"fixed32,7,opt,name=run_frequency,json=runFrequency,proto3" json:"run_frequency,omitempty"`
	EnableOpProfiling                   bool    `protobuf:"varint,8,opt,name=enable_op_profiling,json=enableOpProfiling,proto3" json:"enable_op_profiling,omitempty"`
	MaxProfilingBufferEntries           int32   `protobuf:"varint,9,opt,name=max_profiling_buffer_entries,json=maxProfilingBufferEntries,proto3" json:"max_profiling_buffer_entries,omitempty"`
	AllowDynamicProfilingBufferIncrease bool    `protobuf:"varint,10,opt,name=allow_dynamic_profiling_buffer_increase,json=allowDynamicProfilingBufferIncrease,proto3" json:"allow_dynamic_profiling_buffer_increase,omitempty"`
	ProfilingOutputCsvFile              string  `protobuf:"bytes,11,opt,name=profiling_output_csv_file,json=profilingOutputCsvFile,proto3" json:"profiling_output_csv_file,omitempty"`
	PrintPreinvokeState                 bool    `protobuf:"varint,12,opt,name=print_preinvoke_state,json=printPreinvokeState,proto3" json:"print_preinvoke_state,omitempty"`
	PrintPostinvokeState                bool    `protobuf:"varint,13,opt,name=print_postinvoke_state,json=printPostinvokeState,proto3" json:"print_postinvoke_state,omitempty"`
	ReportPeakMemoryFootprint           bool    `protobuf:"varint,14,opt,name=report_peak_memory_footprint,json=reportPeakMemoryFootprint,proto3" json:"report_peak_memory_footprint,omitempty"`
	MemoryFootprintCheckIntervalMs      int32   `protobuf:"varint,15,opt,name=memory_footprint_check_interval_ms,json=memoryFootprintCheckIntervalMs,proto3" json:"memory_footprint_check_interval_ms,omitempty"`
	DryRun                              bool    `protobuf:"varint,16,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Verbose                             bool    `protobuf:"varint,17,opt,name=verbose,proto3" json:"verbose,omitempty"`
	ReleaseDynamicTensors               bool    `protobuf:"varint,18,opt,name=release_dynamic_tensors,json=releaseDynamicTensors,proto3" json:"release_dynamic_tensors,omitempty"`
	OptimizeMemoryForLargeTensors       int32   `protobuf:"varint,19,opt,name=optimize_memory_for_large_tensors,json=optimizeMemoryForLargeTensors,proto3" json:"optimize_memory_for_large_tensors,omitempty"`
	InputLayer                          string  `protobuf:"bytes,20,opt,name=input_layer,json=inputLayer,proto3" json:"input_layer,omitempty"`
	InputLayerShape                     string  `protobuf:"bytes,21,opt,name=input_layer_shape,json=inputLayerShape,proto3" json:"input_layer_shape,omitempty"`
	InputLayerValueRange                string  `protobuf:"bytes,22,opt,name=input_layer_value_range,json=inputLayerValueRange,proto3" json:"input_layer_value_range,omitempty"`
	InputLayerValueFiles                string  `protobuf:"bytes,23,opt,name=input_layer_value_files,json=inputLayerValueFiles,proto3" json:"input_layer_value_files,omitempty"`
}

func (x *TFLiteParameters) Reset() {
	*x = TFLiteParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFLiteParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFLiteParameters) ProtoMessage() {}

func (x *TFLiteParameters) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFLiteParameters.ProtoReflect.Descriptor instead.
func (*TFLiteParameters) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{7}
}

func (x *TFLiteParameters) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *TFLiteParameters) GetNumThreads() int32 {
	if x != nil {
		return x.NumThreads
	}
	return 0
}

func (x *TFLiteParameters) GetWarmupRuns() int32 {
	if x != nil {
		return x.WarmupRuns
	}
	return 0
}

func (x *TFLiteParameters) GetNumRuns() int32 {
	if x != nil {
		return x.NumRuns
	}
	return 0
}

func (x *TFLiteParameters) GetMaxSecs() float32 {
	if x != nil {
		return x.MaxSecs
	}
	return 0
}

func (x *TFLiteParameters) GetRunDelay() float32 {
	if x != nil {
		return x.RunDelay
	}
	return 0
}

func (x *TFLiteParameters) GetRunFrequency() float32 {
	if x != nil {
		return x.RunFrequency
	}
	return 0
}

func (x *TFLiteParameters) GetEnableOpProfiling() bool {
	if x != nil {
		return x.EnableOpProfiling
	}
	return false
}

func (x *TFLiteParameters) GetMaxProfilingBufferEntries() int32 {
	if x != nil {
		return x.MaxProfilingBufferEntries
	}
	return 0
}

func (x *TFLiteParameters) GetAllowDynamicProfilingBufferIncrease() bool {
	if x != nil {
		return x.AllowDynamicProfilingBufferIncrease
	}
	return false
}

func (x *TFLiteParameters) GetProfilingOutputCsvFile() string {
	if x != nil {
		return x.ProfilingOutputCsvFile
	}
	return ""
}

func (x *TFLiteParameters) GetPrintPreinvokeState() bool {
	if x != nil {
		return x.PrintPreinvokeState
	}
	return false
}

func (x *TFLiteParameters) GetPrintPostinvokeState() bool {
	if x != nil {
		return x.PrintPostinvokeState
	}
	return false
}

func (x *TFLiteParameters) GetReportPeakMemoryFootprint() bool {
	if x != nil {
		return x.ReportPeakMemoryFootprint
	}
	return false
}

func (x *TFLiteParameters) GetMemoryFootprintCheckIntervalMs() int32 {
	if x != nil {
		return x.MemoryFootprintCheckIntervalMs
	}
	return 0
}

func (x *TFLiteParameters) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *TFLiteParameters) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *TFLiteParameters) GetReleaseDynamicTensors() bool {
	if x != nil {
		return x.ReleaseDynamicTensors
	}
	return false
}

func (x *TFLiteParameters) GetOptimizeMemoryForLargeTensors() int32 {
	if x != nil {
		return x.OptimizeMemoryForLargeTensors
	}
	return 0
}

func (x *TFLiteParameters) GetInputLayer() string {
	if x != nil {
		return x.InputLayer
	}
	return ""
}

func (x *TFLiteParameters) GetInputLayerShape() string {
	if x != nil {
		return x.InputLayerShape
	}
	return ""
}

func (x *TFLiteParameters) GetInputLayerValueRange() string {
	if x != nil {
		return x.InputLayerValueRange
	}
	return ""
}

func (x *TFLiteParameters) GetInputLayerValueFiles() string {
	if x != nil {
		return x.InputLayerValueFiles
	}
	return ""
}

type TFLiteDelegateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDelegatedPartitions int32  `protobuf:"varint,1,opt,name=max_delegated_partitions,json=maxDelegatedPartitions,proto3" json:"max_delegated_partitions,omitempty"`
	MinNodesPerPartition   int32  `protobuf:"varint,2,opt,name=min_nodes_per_partition,json=minNodesPerPartition,proto3" json:"min_nodes_per_partition,omitempty"`
	DelegateSerializeDir   string `protobuf:"bytes,3,opt,name=delegate_serialize_dir,json=delegateSerializeDir,proto3" json:"delegate_serialize_dir,omitempty"`
	DelegateSerializeToken string `protobuf:"bytes,4,opt,name=delegate_serialize_token,json=delegateSerializeToken,proto3" json:"delegate_serialize_token,omitempty"`
	// GPU Args
	UseGpu                        bool   `protobuf:"varint,5,opt,name=use_gpu,json=useGpu,proto3" json:"use_gpu,omitempty"`
	GpuPrecisionLossAllowed       bool   `protobuf:"varint,6,opt,name=gpu_precision_loss_allowed,json=gpuPrecisionLossAllowed,proto3" json:"gpu_precision_loss_allowed,omitempty"`
	GpuExperimentalEnableQuant    bool   `protobuf:"varint,7,opt,name=gpu_experimental_enable_quant,json=gpuExperimentalEnableQuant,proto3" json:"gpu_experimental_enable_quant,omitempty"`
	GpuInferenceForSustainedSpeed bool   `protobuf:"varint,8,opt,name=gpu_inference_for_sustained_speed,json=gpuInferenceForSustainedSpeed,proto3" json:"gpu_inference_for_sustained_speed,omitempty"`
	GpuBackend                    string `protobuf:"bytes,9,opt,name=gpu_backend,json=gpuBackend,proto3" json:"gpu_backend,omitempty"`
	GpuWaitType                   string `protobuf:"bytes,10,opt,name=gpu_wait_type,json=gpuWaitType,proto3" json:"gpu_wait_type,omitempty"`
	// NNApi
	UseNnapi                    bool   `protobuf:"varint,11,opt,name=use_nnapi,json=useNnapi,proto3" json:"use_nnapi,omitempty"`
	NnapiExecutionPreference    string `protobuf:"bytes,12,opt,name=nnapi_execution_preference,json=nnapiExecutionPreference,proto3" json:"nnapi_execution_preference,omitempty"`
	NnapiExecutionPriority      string `protobuf:"bytes,13,opt,name=nnapi_execution_priority,json=nnapiExecutionPriority,proto3" json:"nnapi_execution_priority,omitempty"`
	NnapiAcceleratorName        string `protobuf:"bytes,14,opt,name=nnapi_accelerator_name,json=nnapiAcceleratorName,proto3" json:"nnapi_accelerator_name,omitempty"`
	DisableNnapiCpu             bool   `protobuf:"varint,15,opt,name=disable_nnapi_cpu,json=disableNnapiCpu,proto3" json:"disable_nnapi_cpu,omitempty"`
	NnapiAllowFp16              bool   `protobuf:"varint,16,opt,name=nnapi_allow_fp16,json=nnapiAllowFp16,proto3" json:"nnapi_allow_fp16,omitempty"`
	NnapiAllowDynamicDimensions bool   `protobuf:"varint,17,opt,name=nnapi_allow_dynamic_dimensions,json=nnapiAllowDynamicDimensions,proto3" json:"nnapi_allow_dynamic_dimensions,omitempty"`
	NnapiUseBurstMode           bool   `protobuf:"varint,18,opt,name=nnapi_use_burst_mode,json=nnapiUseBurstMode,proto3" json:"nnapi_use_burst_mode,omitempty"`
	// Hexagon
	UseHexagon       bool   `protobuf:"varint,19,opt,name=use_hexagon,json=useHexagon,proto3" json:"use_hexagon,omitempty"`
	HexagonProfiling bool   `protobuf:"varint,20,opt,name=hexagon_profiling,json=hexagonProfiling,proto3" json:"hexagon_profiling,omitempty"`
	HexagonLibPath   string `protobuf:"bytes,21,opt,name=hexagon_lib_path,json=hexagonLibPath,proto3" json:"hexagon_lib_path,omitempty"`
	// XNNPACK
	UseXnnpack bool `protobuf:"varint,22,opt,name=use_xnnpack,json=useXnnpack,proto3" json:"use_xnnpack,omitempty"`
	// CoreML delegate
	UseCoreml     bool  `protobuf:"varint,23,opt,name=use_coreml,json=useCoreml,proto3" json:"use_coreml,omitempty"`
	CoremlVersion int32 `protobuf:"varint,24,opt,name=coreml_version,json=coremlVersion,proto3" json:"coreml_version,omitempty"`
	// external_delegate
	ExternalDelegatePath    string `protobuf:"bytes,25,opt,name=external_delegate_path,json=externalDelegatePath,proto3" json:"external_delegate_path,omitempty"`
	ExternalDelegateOptions string `protobuf:"bytes,26,opt,name=external_delegate_options,json=externalDelegateOptions,proto3" json:"external_delegate_options,omitempty"`
}

func (x *TFLiteDelegateParameters) Reset() {
	*x = TFLiteDelegateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFLiteDelegateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFLiteDelegateParameters) ProtoMessage() {}

func (x *TFLiteDelegateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFLiteDelegateParameters.ProtoReflect.Descriptor instead.
func (*TFLiteDelegateParameters) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{8}
}

func (x *TFLiteDelegateParameters) GetMaxDelegatedPartitions() int32 {
	if x != nil {
		return x.MaxDelegatedPartitions
	}
	return 0
}

func (x *TFLiteDelegateParameters) GetMinNodesPerPartition() int32 {
	if x != nil {
		return x.MinNodesPerPartition
	}
	return 0
}

func (x *TFLiteDelegateParameters) GetDelegateSerializeDir() string {
	if x != nil {
		return x.DelegateSerializeDir
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetDelegateSerializeToken() string {
	if x != nil {
		return x.DelegateSerializeToken
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetUseGpu() bool {
	if x != nil {
		return x.UseGpu
	}
	return false
}

func (x *TFLiteDelegateParameters) GetGpuPrecisionLossAllowed() bool {
	if x != nil {
		return x.GpuPrecisionLossAllowed
	}
	return false
}

func (x *TFLiteDelegateParameters) GetGpuExperimentalEnableQuant() bool {
	if x != nil {
		return x.GpuExperimentalEnableQuant
	}
	return false
}

func (x *TFLiteDelegateParameters) GetGpuInferenceForSustainedSpeed() bool {
	if x != nil {
		return x.GpuInferenceForSustainedSpeed
	}
	return false
}

func (x *TFLiteDelegateParameters) GetGpuBackend() string {
	if x != nil {
		return x.GpuBackend
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetGpuWaitType() string {
	if x != nil {
		return x.GpuWaitType
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetUseNnapi() bool {
	if x != nil {
		return x.UseNnapi
	}
	return false
}

func (x *TFLiteDelegateParameters) GetNnapiExecutionPreference() string {
	if x != nil {
		return x.NnapiExecutionPreference
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetNnapiExecutionPriority() string {
	if x != nil {
		return x.NnapiExecutionPriority
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetNnapiAcceleratorName() string {
	if x != nil {
		return x.NnapiAcceleratorName
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetDisableNnapiCpu() bool {
	if x != nil {
		return x.DisableNnapiCpu
	}
	return false
}

func (x *TFLiteDelegateParameters) GetNnapiAllowFp16() bool {
	if x != nil {
		return x.NnapiAllowFp16
	}
	return false
}

func (x *TFLiteDelegateParameters) GetNnapiAllowDynamicDimensions() bool {
	if x != nil {
		return x.NnapiAllowDynamicDimensions
	}
	return false
}

func (x *TFLiteDelegateParameters) GetNnapiUseBurstMode() bool {
	if x != nil {
		return x.NnapiUseBurstMode
	}
	return false
}

func (x *TFLiteDelegateParameters) GetUseHexagon() bool {
	if x != nil {
		return x.UseHexagon
	}
	return false
}

func (x *TFLiteDelegateParameters) GetHexagonProfiling() bool {
	if x != nil {
		return x.HexagonProfiling
	}
	return false
}

func (x *TFLiteDelegateParameters) GetHexagonLibPath() string {
	if x != nil {
		return x.HexagonLibPath
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetUseXnnpack() bool {
	if x != nil {
		return x.UseXnnpack
	}
	return false
}

func (x *TFLiteDelegateParameters) GetUseCoreml() bool {
	if x != nil {
		return x.UseCoreml
	}
	return false
}

func (x *TFLiteDelegateParameters) GetCoremlVersion() int32 {
	if x != nil {
		return x.CoremlVersion
	}
	return 0
}

func (x *TFLiteDelegateParameters) GetExternalDelegatePath() string {
	if x != nil {
		return x.ExternalDelegatePath
	}
	return ""
}

func (x *TFLiteDelegateParameters) GetExternalDelegateOptions() string {
	if x != nil {
		return x.ExternalDelegateOptions
	}
	return ""
}

var File_profile_proto protoreflect.FileDescriptor

var file_profile_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x6e, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x4e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x40, 0x0a, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x41, 0x49, 0x41,
	0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x0a, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x46, 0x4c, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x22, 0x49, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x6e, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x61, 0x64,
	0x64, 0x6c, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6e, 0x78, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x49, 0x10, 0x04, 0x42,
	0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x23, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x4a, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x0b, 0x4e, 0x4e, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x2a, 0x0a,
	0x0e, 0x50, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x09, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x41, 0x72, 0x67, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x0a, 0x54, 0x46, 0x4c, 0x69, 0x74, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x46, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x46, 0x4c, 0x69,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x46, 0x4c, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4f,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x68, 0x65, 0x78,
	0x61, 0x67, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x78, 0x6e, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x65, 0x6d, 0x6c, 0x10, 0x05, 0x22,
	0xcb, 0x08, 0x0a, 0x10, 0x54, 0x46, 0x4c, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x73, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65,
	0x61, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x74,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x8b, 0x0a,
	0x0a, 0x18, 0x54, 0x46, 0x4c, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44, 0x69,
	0x72, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x47, 0x70, 0x75, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x67, 0x70, 0x75, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x1d, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x67, 0x70, 0x75, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x70, 0x75, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x67, 0x70, 0x75, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x70, 0x75, 0x57, 0x61, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6e, 0x61, 0x70, 0x69,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4e, 0x6e, 0x61, 0x70, 0x69,
	0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6e, 0x61, 0x70,
	0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6e, 0x61, 0x70, 0x69, 0x43, 0x70, 0x75, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6e,
	0x61, 0x70, 0x69, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x70, 0x31, 0x36, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x70, 0x31, 0x36, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x6e,
	0x61, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6e, 0x61,
	0x70, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x55, 0x73,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x48, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x68,
	0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x78, 0x61,
	0x67, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x78, 0x6e, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x58, 0x6e, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x6d,
	0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x6d, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65,
	0x6d, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3a, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xaa, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x65,
	0x78, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profile_proto_rawDescOnce sync.Once
	file_profile_proto_rawDescData = file_profile_proto_rawDesc
)

func file_profile_proto_rawDescGZIP() []byte {
	file_profile_proto_rawDescOnce.Do(func() {
		file_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_profile_proto_rawDescData)
	})
	return file_profile_proto_rawDescData
}

var file_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_profile_proto_goTypes = []interface{}{
	(ProfileRequest_Type)(0),         // 0: protos.ProfileRequest.Type
	(TFLiteArgs_DeviceType)(0),       // 1: protos.TFLiteArgs.DeviceType
	(*ProfileRequest)(nil),           // 2: protos.ProfileRequest
	(*ProfileResponse)(nil),          // 3: protos.ProfileResponse
	(*File)(nil),                     // 4: protos.File
	(*NNMeterArgs)(nil),              // 5: protos.NNMeterArgs
	(*PaddleLiteArgs)(nil),           // 6: protos.PaddleLiteArgs
	(*FAIArgs)(nil),                  // 7: protos.FAIArgs
	(*TFLiteArgs)(nil),               // 8: protos.TFLiteArgs
	(*TFLiteParameters)(nil),         // 9: protos.TFLiteParameters
	(*TFLiteDelegateParameters)(nil), // 10: protos.TFLiteDelegateParameters
}
var file_profile_proto_depIdxs = []int32{
	4,  // 0: protos.ProfileRequest.modelFile:type_name -> protos.File
	5,  // 1: protos.ProfileRequest.nnmeterArgs:type_name -> protos.NNMeterArgs
	6,  // 2: protos.ProfileRequest.paddleLiteArgs:type_name -> protos.PaddleLiteArgs
	7,  // 3: protos.ProfileRequest.faiArgs:type_name -> protos.FAIArgs
	8,  // 4: protos.ProfileRequest.tfliteArgs:type_name -> protos.TFLiteArgs
	1,  // 5: protos.TFLiteArgs.deviceType:type_name -> protos.TFLiteArgs.DeviceType
	9,  // 6: protos.TFLiteArgs.params:type_name -> protos.TFLiteParameters
	10, // 7: protos.TFLiteArgs.delegateParams:type_name -> protos.TFLiteDelegateParameters
	2,  // 8: protos.Profile.profileWithArgs:input_type -> protos.ProfileRequest
	2,  // 9: protos.Profile.getProfileAbility:input_type -> protos.ProfileRequest
	2,  // 10: protos.Profile.getModelStaticAttr:input_type -> protos.ProfileRequest
	2,  // 11: protos.Profile.getDeviceStaticAttr:input_type -> protos.ProfileRequest
	3,  // 12: protos.Profile.profileWithArgs:output_type -> protos.ProfileResponse
	3,  // 13: protos.Profile.getProfileAbility:output_type -> protos.ProfileResponse
	3,  // 14: protos.Profile.getModelStaticAttr:output_type -> protos.ProfileResponse
	3,  // 15: protos.Profile.getDeviceStaticAttr:output_type -> protos.ProfileResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_profile_proto_init() }
func file_profile_proto_init() {
	if File_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NNMeterArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaddleLiteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAIArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFLiteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFLiteParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFLiteDelegateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_profile_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProfileRequest_NnmeterArgs)(nil),
		(*ProfileRequest_PaddleLiteArgs)(nil),
		(*ProfileRequest_FaiArgs)(nil),
		(*ProfileRequest_TfliteArgs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profile_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profile_proto_goTypes,
		DependencyIndexes: file_profile_proto_depIdxs,
		EnumInfos:         file_profile_proto_enumTypes,
		MessageInfos:      file_profile_proto_msgTypes,
	}.Build()
	File_profile_proto = out.File
	file_profile_proto_rawDesc = nil
	file_profile_proto_goTypes = nil
	file_profile_proto_depIdxs = nil
}
