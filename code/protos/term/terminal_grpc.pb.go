// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: terminal.proto

package term

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerminalClient is the client API for Terminal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalClient interface {
	NewTerminal(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error)
	CloseTerminal(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error)
	ExecCommand(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error)
}

type terminalClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalClient(cc grpc.ClientConnInterface) TerminalClient {
	return &terminalClient{cc}
}

func (c *terminalClient) NewTerminal(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error) {
	out := new(TerminalResponse)
	err := c.cc.Invoke(ctx, "/protos.Terminal/NewTerminal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalClient) CloseTerminal(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error) {
	out := new(TerminalResponse)
	err := c.cc.Invoke(ctx, "/protos.Terminal/CloseTerminal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalClient) ExecCommand(ctx context.Context, in *TerminalRequest, opts ...grpc.CallOption) (*TerminalResponse, error) {
	out := new(TerminalResponse)
	err := c.cc.Invoke(ctx, "/protos.Terminal/ExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServer is the server API for Terminal service.
// All implementations must embed UnimplementedTerminalServer
// for forward compatibility
type TerminalServer interface {
	NewTerminal(context.Context, *TerminalRequest) (*TerminalResponse, error)
	CloseTerminal(context.Context, *TerminalRequest) (*TerminalResponse, error)
	ExecCommand(context.Context, *TerminalRequest) (*TerminalResponse, error)
	mustEmbedUnimplementedTerminalServer()
}

// UnimplementedTerminalServer must be embedded to have forward compatible implementations.
type UnimplementedTerminalServer struct {
}

func (UnimplementedTerminalServer) NewTerminal(context.Context, *TerminalRequest) (*TerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTerminal not implemented")
}
func (UnimplementedTerminalServer) CloseTerminal(context.Context, *TerminalRequest) (*TerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTerminal not implemented")
}
func (UnimplementedTerminalServer) ExecCommand(context.Context, *TerminalRequest) (*TerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCommand not implemented")
}
func (UnimplementedTerminalServer) mustEmbedUnimplementedTerminalServer() {}

// UnsafeTerminalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServer will
// result in compilation errors.
type UnsafeTerminalServer interface {
	mustEmbedUnimplementedTerminalServer()
}

func RegisterTerminalServer(s grpc.ServiceRegistrar, srv TerminalServer) {
	s.RegisterService(&Terminal_ServiceDesc, srv)
}

func _Terminal_NewTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).NewTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Terminal/NewTerminal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).NewTerminal(ctx, req.(*TerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terminal_CloseTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).CloseTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Terminal/CloseTerminal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).CloseTerminal(ctx, req.(*TerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terminal_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Terminal/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).ExecCommand(ctx, req.(*TerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Terminal_ServiceDesc is the grpc.ServiceDesc for Terminal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Terminal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Terminal",
	HandlerType: (*TerminalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTerminal",
			Handler:    _Terminal_NewTerminal_Handler,
		},
		{
			MethodName: "CloseTerminal",
			Handler:    _Terminal_CloseTerminal_Handler,
		},
		{
			MethodName: "ExecCommand",
			Handler:    _Terminal_ExecCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terminal.proto",
}
